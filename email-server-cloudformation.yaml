AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete Email Server Infrastructure on AWS'

Parameters:
  DomainName:
    Type: String
    Description: Your domain name (e.g., example.com)
    Default: example.com
  
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
  
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type
  
  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Password for RDS MySQL instance
    ConstraintDescription: Must be at least 8 characters

Resources:
  # VPC and Networking
  EmailVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  EmailInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref EmailVPC
      InternetGatewayId: !Ref EmailInternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EmailVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet'

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EmailVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EmailVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref EmailInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  EmailServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for email server
      VpcId: !Ref EmailVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH
        - IpProtocol: tcp
          FromPort: 25
          ToPort: 25
          CidrIp: 0.0.0.0/0
          Description: SMTP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP
        - IpProtocol: tcp
          FromPort: 110
          ToPort: 110
          CidrIp: 0.0.0.0/0
          Description: POP3
        - IpProtocol: tcp
          FromPort: 143
          ToPort: 143
          CidrIp: 0.0.0.0/0
          Description: IMAP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS
        - IpProtocol: tcp
          FromPort: 465
          ToPort: 465
          CidrIp: 0.0.0.0/0
          Description: SMTPS
        - IpProtocol: tcp
          FromPort: 587
          ToPort: 587
          CidrIp: 0.0.0.0/0
          Description: SMTP Submission
        - IpProtocol: tcp
          FromPort: 993
          ToPort: 993
          CidrIp: 0.0.0.0/0
          Description: IMAPS
        - IpProtocol: tcp
          FromPort: 995
          ToPort: 995
          CidrIp: 0.0.0.0/0
          Description: POP3S
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-email-sg'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref EmailVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EmailServerSecurityGroup
          Description: MySQL from email server
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-sg'

  # RDS Subnet Group
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for email server database
      SubnetIds:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-group'

  # RDS Instance
  EmailDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-db'
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: '8.0'
      MasterUsername: mailuser
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 20
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database'

  # Elastic IP
  EmailServerEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-eip'

  # EC2 Instance
  EmailServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Ubuntu 22.04 LTS (update for your region)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref EmailServerSecurityGroup
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update && apt upgrade -y
          hostnamectl set-hostname mail.${DomainName}
          echo "127.0.0.1 localhost" > /etc/hosts
          echo "$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4) mail.${DomainName} mail" >> /etc/hosts
          
          # Install basic packages
          apt install -y curl wget unzip
          
          # Download installation script
          cd /root
          wget https://raw.githubusercontent.com/your-repo/install-email-server.sh
          chmod +x install-email-server.sh
          
          # Set environment variables for the script
          export DOMAIN="${DomainName}"
          export DB_HOST="${EmailDatabase.Endpoint.Address}"
          export DB_PASSWORD="${DBPassword}"
          
          # Note: The actual installation should be run manually after DNS is configured
          echo "Email server ready for installation. Run ./install-email-server.sh after configuring DNS."
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-email-server'

  # Associate Elastic IP
  EmailServerEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EmailServerInstance
      EIP: !Ref EmailServerEIP

  # Route 53 Hosted Zone (optional - if managing DNS with AWS)
  EmailHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub 'Hosted zone for ${DomainName} email server'

  # DNS Records
  MailARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref EmailHostedZone
      Name: !Sub 'mail.${DomainName}'
      Type: A
      TTL: 300
      ResourceRecords:
        - !Ref EmailServerEIP

  MXRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref EmailHostedZone
      Name: !Ref DomainName
      Type: MX
      TTL: 300
      ResourceRecords:
        - !Sub '10 mail.${DomainName}'

  SPFRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref EmailHostedZone
      Name: !Ref DomainName
      Type: TXT
      TTL: 300
      ResourceRecords:
        - !Sub '"v=spf1 a mx ip4:${EmailServerEIP} ~all"'

  # CloudWatch Log Group for monitoring
  EmailServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ec2/${AWS::StackName}-email-server'
      RetentionInDays: 30

Outputs:
  EmailServerIP:
    Description: Elastic IP address of the email server
    Value: !Ref EmailServerEIP
    Export:
      Name: !Sub '${AWS::StackName}-EmailServerIP'

  DatabaseEndpoint:
    Description: RDS database endpoint
    Value: !GetAtt EmailDatabase.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseEndpoint'

  MailHostname:
    Description: Mail server hostname
    Value: !Sub 'mail.${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-MailHostname'

  WebmailURL:
    Description: Webmail access URL
    Value: !Sub 'https://mail.${DomainName}/roundcube'
    Export:
      Name: !Sub '${AWS::StackName}-WebmailURL'

  NextSteps:
    Description: Next steps after stack creation
    Value: |
      1. Configure reverse DNS (PTR record) with AWS support
      2. SSH to the server and run the installation script
      3. Set up DKIM DNS record from the server
      4. Test email functionality
      5. Configure additional users in the database
